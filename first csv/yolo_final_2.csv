Name,Type,Input Channels,Output Channels,Kernel Size,Stride,Padding
,"AutoShape(
  (model): Model(
    (model): Sequential(
      (0): Conv(
        (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
      (1): Conv(
        (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
      (2): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (3): Conv(
        (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
      (4): Sequential(
        (0): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (1): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
      )
      (5): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
      (6): Sequential(
        (0): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (1): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (2): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (3): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (4): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (5): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (6): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (7): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
      )
      (7): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
      (8): Sequential(
        (0): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (1): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (2): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (3): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (4): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (5): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (6): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (7): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
      )
      (9): Conv(
        (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
      (10): Sequential(
        (0): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (1): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (2): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (3): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
      )
      (11): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (12): Conv(
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (13): Conv(
        (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
      (14): Conv(
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (15): Conv(
        (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
      (16): Conv(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (17): Upsample(scale_factor=2.0, mode=nearest)
      (18): Concat()
      (19): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (20): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (21): Conv(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (22): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
      (23): Conv(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (24): Upsample(scale_factor=2.0, mode=nearest)
      (25): Concat()
      (26): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (27): Sequential(
        (0): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (1): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
      )
      (28): Detect(
        (m): ModuleList(
          (0): Conv2d(256, 255, kernel_size=(1, 1), stride=(1, 1))
          (1): Conv2d(512, 255, kernel_size=(1, 1), stride=(1, 1))
          (2): Conv2d(1024, 255, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
  )
)"
model,"Model(
  (model): Sequential(
    (0): Conv(
      (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
    (1): Conv(
      (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
    (2): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (3): Conv(
      (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
    (4): Sequential(
      (0): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (1): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
    )
    (5): Conv(
      (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
    (6): Sequential(
      (0): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (1): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (2): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (3): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (4): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (5): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (6): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (7): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
    )
    (7): Conv(
      (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
    (8): Sequential(
      (0): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (1): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (2): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (3): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (4): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (5): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (6): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (7): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
    )
    (9): Conv(
      (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
    (10): Sequential(
      (0): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (1): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (2): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (3): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
    )
    (11): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (12): Conv(
      (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
      (act): SiLU(inplace=True)
    )
    (13): Conv(
      (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
    (14): Conv(
      (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
      (act): SiLU(inplace=True)
    )
    (15): Conv(
      (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
    (16): Conv(
      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (act): SiLU(inplace=True)
    )
    (17): Upsample(scale_factor=2.0, mode=nearest)
    (18): Concat()
    (19): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (20): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (21): Conv(
      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (act): SiLU(inplace=True)
    )
    (22): Conv(
      (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
    (23): Conv(
      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
      (act): SiLU(inplace=True)
    )
    (24): Upsample(scale_factor=2.0, mode=nearest)
    (25): Concat()
    (26): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (27): Sequential(
      (0): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (1): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
    )
    (28): Detect(
      (m): ModuleList(
        (0): Conv2d(256, 255, kernel_size=(1, 1), stride=(1, 1))
        (1): Conv2d(512, 255, kernel_size=(1, 1), stride=(1, 1))
        (2): Conv2d(1024, 255, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
)"
model.model,"Sequential(
  (0): Conv(
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (act): SiLU(inplace=True)
  )
  (1): Conv(
    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (act): SiLU(inplace=True)
  )
  (2): Bottleneck(
    (cv1): Conv(
      (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
      (act): SiLU(inplace=True)
    )
    (cv2): Conv(
      (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
  )
  (3): Conv(
    (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (act): SiLU(inplace=True)
  )
  (4): Sequential(
    (0): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (1): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
  )
  (5): Conv(
    (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (act): SiLU(inplace=True)
  )
  (6): Sequential(
    (0): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (1): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (2): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (3): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (4): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (5): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (6): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (7): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
  )
  (7): Conv(
    (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (act): SiLU(inplace=True)
  )
  (8): Sequential(
    (0): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (1): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (2): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (3): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (4): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (5): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (6): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (7): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
  )
  (9): Conv(
    (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (act): SiLU(inplace=True)
  )
  (10): Sequential(
    (0): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (1): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (2): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (3): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
  )
  (11): Bottleneck(
    (cv1): Conv(
      (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
      (act): SiLU(inplace=True)
    )
    (cv2): Conv(
      (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
  )
  (12): Conv(
    (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
    (act): SiLU(inplace=True)
  )
  (13): Conv(
    (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (act): SiLU(inplace=True)
  )
  (14): Conv(
    (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
    (act): SiLU(inplace=True)
  )
  (15): Conv(
    (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (act): SiLU(inplace=True)
  )
  (16): Conv(
    (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (act): SiLU(inplace=True)
  )
  (17): Upsample(scale_factor=2.0, mode=nearest)
  (18): Concat()
  (19): Bottleneck(
    (cv1): Conv(
      (conv): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
      (act): SiLU(inplace=True)
    )
    (cv2): Conv(
      (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
  )
  (20): Bottleneck(
    (cv1): Conv(
      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (act): SiLU(inplace=True)
    )
    (cv2): Conv(
      (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
  )
  (21): Conv(
    (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (act): SiLU(inplace=True)
  )
  (22): Conv(
    (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (act): SiLU(inplace=True)
  )
  (23): Conv(
    (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
    (act): SiLU(inplace=True)
  )
  (24): Upsample(scale_factor=2.0, mode=nearest)
  (25): Concat()
  (26): Bottleneck(
    (cv1): Conv(
      (conv): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1))
      (act): SiLU(inplace=True)
    )
    (cv2): Conv(
      (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
  )
  (27): Sequential(
    (0): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (1): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
  )
  (28): Detect(
    (m): ModuleList(
      (0): Conv2d(256, 255, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(512, 255, kernel_size=(1, 1), stride=(1, 1))
      (2): Conv2d(1024, 255, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)"
model.model.0,"Conv(
  (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (act): SiLU(inplace=True)
)"
model.model.0.conv,Conv2D,3,32,"(3, 3)","(1, 1)","(1, 1)"
model.model.0.act,Other,3,32,"(3, 3)","(1, 1)","(1, 1)"
model.model.1,Other,3,32,"(3, 3)","(1, 1)","(1, 1)"
model.model.1.conv,Conv2D,32,64,"(3, 3)","(2, 2)","(1, 1)"
model.model.1.act,Other,32,64,"(3, 3)","(2, 2)","(1, 1)"
model.model.2,Other,32,64,"(3, 3)","(2, 2)","(1, 1)"
model.model.2.cv1,Other,32,64,"(3, 3)","(2, 2)","(1, 1)"
model.model.2.cv1.conv,Conv2D,64,32,"(1, 1)","(1, 1)","(0, 0)"
model.model.2.cv1.act,Other,64,32,"(1, 1)","(1, 1)","(0, 0)"
model.model.2.cv2,Other,64,32,"(1, 1)","(1, 1)","(0, 0)"
model.model.2.cv2.conv,Conv2D,32,64,"(3, 3)","(1, 1)","(1, 1)"
model.model.2.cv2.act,Other,32,64,"(3, 3)","(1, 1)","(1, 1)"
model.model.3,Other,32,64,"(3, 3)","(1, 1)","(1, 1)"
model.model.3.conv,Conv2D,64,128,"(3, 3)","(2, 2)","(1, 1)"
model.model.3.act,Other,64,128,"(3, 3)","(2, 2)","(1, 1)"
model.model.4,Other,64,128,"(3, 3)","(2, 2)","(1, 1)"
model.model.4.0,Other,64,128,"(3, 3)","(2, 2)","(1, 1)"
model.model.4.0.cv1,Other,64,128,"(3, 3)","(2, 2)","(1, 1)"
model.model.4.0.cv1.conv,Conv2D,128,64,"(1, 1)","(1, 1)","(0, 0)"
model.model.4.0.cv1.act,Other,128,64,"(1, 1)","(1, 1)","(0, 0)"
model.model.4.0.cv2,Other,128,64,"(1, 1)","(1, 1)","(0, 0)"
model.model.4.0.cv2.conv,Conv2D,64,128,"(3, 3)","(1, 1)","(1, 1)"
model.model.4.0.cv2.act,Other,64,128,"(3, 3)","(1, 1)","(1, 1)"
model.model.4.1,Other,64,128,"(3, 3)","(1, 1)","(1, 1)"
model.model.4.1.cv1,Other,64,128,"(3, 3)","(1, 1)","(1, 1)"
model.model.4.1.cv1.conv,Conv2D,128,64,"(1, 1)","(1, 1)","(0, 0)"
model.model.4.1.cv1.act,Other,128,64,"(1, 1)","(1, 1)","(0, 0)"
model.model.4.1.cv2,Other,128,64,"(1, 1)","(1, 1)","(0, 0)"
model.model.4.1.cv2.conv,Conv2D,64,128,"(3, 3)","(1, 1)","(1, 1)"
model.model.4.1.cv2.act,Other,64,128,"(3, 3)","(1, 1)","(1, 1)"
model.model.5,Other,64,128,"(3, 3)","(1, 1)","(1, 1)"
model.model.5.conv,Conv2D,128,256,"(3, 3)","(2, 2)","(1, 1)"
model.model.5.act,Other,128,256,"(3, 3)","(2, 2)","(1, 1)"
model.model.6,Other,128,256,"(3, 3)","(2, 2)","(1, 1)"
model.model.6.0,Other,128,256,"(3, 3)","(2, 2)","(1, 1)"
model.model.6.0.cv1,Other,128,256,"(3, 3)","(2, 2)","(1, 1)"
model.model.6.0.cv1.conv,Conv2D,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.6.0.cv1.act,Other,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.6.0.cv2,Other,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.6.0.cv2.conv,Conv2D,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.0.cv2.act,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.1,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.1.cv1,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.1.cv1.conv,Conv2D,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.6.1.cv1.act,Other,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.6.1.cv2,Other,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.6.1.cv2.conv,Conv2D,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.1.cv2.act,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.2,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.2.cv1,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.2.cv1.conv,Conv2D,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.6.2.cv1.act,Other,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.6.2.cv2,Other,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.6.2.cv2.conv,Conv2D,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.2.cv2.act,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.3,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.3.cv1,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.3.cv1.conv,Conv2D,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.6.3.cv1.act,Other,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.6.3.cv2,Other,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.6.3.cv2.conv,Conv2D,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.3.cv2.act,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.4,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.4.cv1,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.4.cv1.conv,Conv2D,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.6.4.cv1.act,Other,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.6.4.cv2,Other,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.6.4.cv2.conv,Conv2D,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.4.cv2.act,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.5,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.5.cv1,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.5.cv1.conv,Conv2D,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.6.5.cv1.act,Other,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.6.5.cv2,Other,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.6.5.cv2.conv,Conv2D,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.5.cv2.act,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.6,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.6.cv1,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.6.cv1.conv,Conv2D,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.6.6.cv1.act,Other,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.6.6.cv2,Other,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.6.6.cv2.conv,Conv2D,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.6.cv2.act,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.7,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.7.cv1,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.7.cv1.conv,Conv2D,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.6.7.cv1.act,Other,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.6.7.cv2,Other,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.6.7.cv2.conv,Conv2D,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.6.7.cv2.act,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.7,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.7.conv,Conv2D,256,512,"(3, 3)","(2, 2)","(1, 1)"
model.model.7.act,Other,256,512,"(3, 3)","(2, 2)","(1, 1)"
model.model.8,Other,256,512,"(3, 3)","(2, 2)","(1, 1)"
model.model.8.0,Other,256,512,"(3, 3)","(2, 2)","(1, 1)"
model.model.8.0.cv1,Other,256,512,"(3, 3)","(2, 2)","(1, 1)"
model.model.8.0.cv1.conv,Conv2D,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.8.0.cv1.act,Other,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.8.0.cv2,Other,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.8.0.cv2.conv,Conv2D,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.0.cv2.act,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.1,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.1.cv1,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.1.cv1.conv,Conv2D,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.8.1.cv1.act,Other,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.8.1.cv2,Other,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.8.1.cv2.conv,Conv2D,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.1.cv2.act,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.2,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.2.cv1,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.2.cv1.conv,Conv2D,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.8.2.cv1.act,Other,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.8.2.cv2,Other,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.8.2.cv2.conv,Conv2D,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.2.cv2.act,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.3,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.3.cv1,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.3.cv1.conv,Conv2D,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.8.3.cv1.act,Other,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.8.3.cv2,Other,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.8.3.cv2.conv,Conv2D,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.3.cv2.act,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.4,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.4.cv1,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.4.cv1.conv,Conv2D,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.8.4.cv1.act,Other,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.8.4.cv2,Other,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.8.4.cv2.conv,Conv2D,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.4.cv2.act,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.5,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.5.cv1,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.5.cv1.conv,Conv2D,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.8.5.cv1.act,Other,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.8.5.cv2,Other,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.8.5.cv2.conv,Conv2D,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.5.cv2.act,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.6,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.6.cv1,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.6.cv1.conv,Conv2D,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.8.6.cv1.act,Other,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.8.6.cv2,Other,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.8.6.cv2.conv,Conv2D,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.6.cv2.act,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.7,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.7.cv1,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.7.cv1.conv,Conv2D,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.8.7.cv1.act,Other,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.8.7.cv2,Other,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.8.7.cv2.conv,Conv2D,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.8.7.cv2.act,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.9,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.9.conv,Conv2D,512,1024,"(3, 3)","(2, 2)","(1, 1)"
model.model.9.act,Other,512,1024,"(3, 3)","(2, 2)","(1, 1)"
model.model.10,Other,512,1024,"(3, 3)","(2, 2)","(1, 1)"
model.model.10.0,Other,512,1024,"(3, 3)","(2, 2)","(1, 1)"
model.model.10.0.cv1,Other,512,1024,"(3, 3)","(2, 2)","(1, 1)"
model.model.10.0.cv1.conv,Conv2D,1024,512,"(1, 1)","(1, 1)","(0, 0)"
model.model.10.0.cv1.act,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)"
model.model.10.0.cv2,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)"
model.model.10.0.cv2.conv,Conv2D,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.10.0.cv2.act,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.10.1,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.10.1.cv1,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.10.1.cv1.conv,Conv2D,1024,512,"(1, 1)","(1, 1)","(0, 0)"
model.model.10.1.cv1.act,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)"
model.model.10.1.cv2,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)"
model.model.10.1.cv2.conv,Conv2D,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.10.1.cv2.act,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.10.2,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.10.2.cv1,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.10.2.cv1.conv,Conv2D,1024,512,"(1, 1)","(1, 1)","(0, 0)"
model.model.10.2.cv1.act,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)"
model.model.10.2.cv2,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)"
model.model.10.2.cv2.conv,Conv2D,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.10.2.cv2.act,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.10.3,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.10.3.cv1,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.10.3.cv1.conv,Conv2D,1024,512,"(1, 1)","(1, 1)","(0, 0)"
model.model.10.3.cv1.act,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)"
model.model.10.3.cv2,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)"
model.model.10.3.cv2.conv,Conv2D,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.10.3.cv2.act,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.11,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.11.cv1,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.11.cv1.conv,Conv2D,1024,512,"(1, 1)","(1, 1)","(0, 0)"
model.model.11.cv1.act,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)"
model.model.11.cv2,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)"
model.model.11.cv2.conv,Conv2D,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.11.cv2.act,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.12,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.12.conv,Conv2D,1024,512,"(1, 1)","(1, 1)","(0, 0)"
model.model.12.act,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)"
model.model.13,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)"
model.model.13.conv,Conv2D,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.13.act,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.14,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.14.conv,Conv2D,1024,512,"(1, 1)","(1, 1)","(0, 0)"
model.model.14.act,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)"
model.model.15,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)"
model.model.15.conv,Conv2D,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.15.act,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.16,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)"
model.model.16.conv,Conv2D,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.16.act,Other,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.17,Upsample,2.0
model.model.18,Other,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.19,Other,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.19.cv1,Other,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.19.cv1.conv,Conv2D,768,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.19.cv1.act,Other,768,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.19.cv2,Other,768,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.19.cv2.conv,Conv2D,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.19.cv2.act,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.20,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.20.cv1,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.20.cv1.conv,Conv2D,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.20.cv1.act,Other,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.20.cv2,Other,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.20.cv2.conv,Conv2D,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.20.cv2.act,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.21,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.21.conv,Conv2D,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.21.act,Other,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.22,Other,512,256,"(1, 1)","(1, 1)","(0, 0)"
model.model.22.conv,Conv2D,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.22.act,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.23,Other,256,512,"(3, 3)","(1, 1)","(1, 1)"
model.model.23.conv,Conv2D,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.23.act,Other,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.24,Upsample,2.0
model.model.25,Other,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.26,Other,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.26.cv1,Other,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.26.cv1.conv,Conv2D,384,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.26.cv1.act,Other,384,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.26.cv2,Other,384,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.26.cv2.conv,Conv2D,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.26.cv2.act,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.27,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.27.0,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.27.0.cv1,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.27.0.cv1.conv,Conv2D,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.27.0.cv1.act,Other,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.27.0.cv2,Other,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.27.0.cv2.conv,Conv2D,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.27.0.cv2.act,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.27.1,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.27.1.cv1,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.27.1.cv1.conv,Conv2D,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.27.1.cv1.act,Other,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.27.1.cv2,Other,256,128,"(1, 1)","(1, 1)","(0, 0)"
model.model.27.1.cv2.conv,Conv2D,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.27.1.cv2.act,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.28,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.28.m,Other,128,256,"(3, 3)","(1, 1)","(1, 1)"
model.model.28.m.0,Conv2D,256,255,"(1, 1)","(1, 1)","(0, 0)"
model.model.28.m.1,Conv2D,512,255,"(1, 1)","(1, 1)","(0, 0)"
model.model.28.m.2,Conv2D,1024,255,"(1, 1)","(1, 1)","(0, 0)"
,"AutoShape(
  (model): Model(
    (model): Sequential(
      (0): Conv(
        (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
      (1): Conv(
        (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
      (2): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (3): Conv(
        (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
      (4): Sequential(
        (0): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (1): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
      )
      (5): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
      (6): Sequential(
        (0): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (1): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (2): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (3): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (4): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (5): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (6): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (7): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
      )
      (7): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
      (8): Sequential(
        (0): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (1): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (2): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (3): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (4): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (5): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (6): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (7): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
      )
      (9): Conv(
        (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
      (10): Sequential(
        (0): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (1): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (2): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (3): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
      )
      (11): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (12): Conv(
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (13): Conv(
        (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
      (14): Conv(
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (15): Conv(
        (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
      (16): Conv(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (17): Upsample(scale_factor=2.0, mode=nearest)
      (18): Concat()
      (19): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (20): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (21): Conv(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (22): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
      (23): Conv(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (24): Upsample(scale_factor=2.0, mode=nearest)
      (25): Concat()
      (26): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (27): Sequential(
        (0): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
        (1): Bottleneck(
          (cv1): Conv(
            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            (act): SiLU(inplace=True)
          )
          (cv2): Conv(
            (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (act): SiLU(inplace=True)
          )
        )
      )
      (28): Detect(
        (m): ModuleList(
          (0): Conv2d(256, 255, kernel_size=(1, 1), stride=(1, 1))
          (1): Conv2d(512, 255, kernel_size=(1, 1), stride=(1, 1))
          (2): Conv2d(1024, 255, kernel_size=(1, 1), stride=(1, 1))
        )
      )
    )
  )
)",,,,,,
model,"Model(
  (model): Sequential(
    (0): Conv(
      (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
    (1): Conv(
      (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
    (2): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (3): Conv(
      (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
    (4): Sequential(
      (0): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (1): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
    )
    (5): Conv(
      (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
    (6): Sequential(
      (0): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (1): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (2): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (3): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (4): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (5): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (6): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (7): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
    )
    (7): Conv(
      (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
    (8): Sequential(
      (0): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (1): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (2): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (3): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (4): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (5): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (6): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (7): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
    )
    (9): Conv(
      (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
    (10): Sequential(
      (0): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (1): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (2): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (3): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
    )
    (11): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (12): Conv(
      (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
      (act): SiLU(inplace=True)
    )
    (13): Conv(
      (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
    (14): Conv(
      (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
      (act): SiLU(inplace=True)
    )
    (15): Conv(
      (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
    (16): Conv(
      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (act): SiLU(inplace=True)
    )
    (17): Upsample(scale_factor=2.0, mode=nearest)
    (18): Concat()
    (19): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (20): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (21): Conv(
      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (act): SiLU(inplace=True)
    )
    (22): Conv(
      (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
    (23): Conv(
      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
      (act): SiLU(inplace=True)
    )
    (24): Upsample(scale_factor=2.0, mode=nearest)
    (25): Concat()
    (26): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (27): Sequential(
      (0): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
      (1): Bottleneck(
        (cv1): Conv(
          (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
          (act): SiLU(inplace=True)
        )
        (cv2): Conv(
          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (act): SiLU(inplace=True)
        )
      )
    )
    (28): Detect(
      (m): ModuleList(
        (0): Conv2d(256, 255, kernel_size=(1, 1), stride=(1, 1))
        (1): Conv2d(512, 255, kernel_size=(1, 1), stride=(1, 1))
        (2): Conv2d(1024, 255, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
)",,,,,,
model.model,"Sequential(
  (0): Conv(
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (act): SiLU(inplace=True)
  )
  (1): Conv(
    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (act): SiLU(inplace=True)
  )
  (2): Bottleneck(
    (cv1): Conv(
      (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1))
      (act): SiLU(inplace=True)
    )
    (cv2): Conv(
      (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
  )
  (3): Conv(
    (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (act): SiLU(inplace=True)
  )
  (4): Sequential(
    (0): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (1): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
  )
  (5): Conv(
    (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (act): SiLU(inplace=True)
  )
  (6): Sequential(
    (0): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (1): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (2): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (3): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (4): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (5): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (6): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (7): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
  )
  (7): Conv(
    (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (act): SiLU(inplace=True)
  )
  (8): Sequential(
    (0): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (1): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (2): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (3): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (4): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (5): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (6): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (7): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
  )
  (9): Conv(
    (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    (act): SiLU(inplace=True)
  )
  (10): Sequential(
    (0): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (1): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (2): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (3): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
  )
  (11): Bottleneck(
    (cv1): Conv(
      (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
      (act): SiLU(inplace=True)
    )
    (cv2): Conv(
      (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
  )
  (12): Conv(
    (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
    (act): SiLU(inplace=True)
  )
  (13): Conv(
    (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (act): SiLU(inplace=True)
  )
  (14): Conv(
    (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
    (act): SiLU(inplace=True)
  )
  (15): Conv(
    (conv): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (act): SiLU(inplace=True)
  )
  (16): Conv(
    (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (act): SiLU(inplace=True)
  )
  (17): Upsample(scale_factor=2.0, mode=nearest)
  (18): Concat()
  (19): Bottleneck(
    (cv1): Conv(
      (conv): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
      (act): SiLU(inplace=True)
    )
    (cv2): Conv(
      (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
  )
  (20): Bottleneck(
    (cv1): Conv(
      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (act): SiLU(inplace=True)
    )
    (cv2): Conv(
      (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
  )
  (21): Conv(
    (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (act): SiLU(inplace=True)
  )
  (22): Conv(
    (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (act): SiLU(inplace=True)
  )
  (23): Conv(
    (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
    (act): SiLU(inplace=True)
  )
  (24): Upsample(scale_factor=2.0, mode=nearest)
  (25): Concat()
  (26): Bottleneck(
    (cv1): Conv(
      (conv): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1))
      (act): SiLU(inplace=True)
    )
    (cv2): Conv(
      (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (act): SiLU(inplace=True)
    )
  )
  (27): Sequential(
    (0): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
    (1): Bottleneck(
      (cv1): Conv(
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        (act): SiLU(inplace=True)
      )
      (cv2): Conv(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (act): SiLU(inplace=True)
      )
    )
  )
  (28): Detect(
    (m): ModuleList(
      (0): Conv2d(256, 255, kernel_size=(1, 1), stride=(1, 1))
      (1): Conv2d(512, 255, kernel_size=(1, 1), stride=(1, 1))
      (2): Conv2d(1024, 255, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)",,,,,,
model.model.0,"Conv(
  (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (act): SiLU(inplace=True)
)",,,,,,
model.model.0.conv,Conv2D,3,32,"(3, 3)","(1, 1)","(1, 1)",
model.model.0.act,Other,3,32,"(3, 3)","(1, 1)","(1, 1)",
model.model.1,Other,3,32,"(3, 3)","(1, 1)","(1, 1)",
model.model.1.conv,Conv2D,32,64,"(3, 3)","(2, 2)","(1, 1)",
model.model.1.act,Other,32,64,"(3, 3)","(2, 2)","(1, 1)",
model.model.2,Other,32,64,"(3, 3)","(2, 2)","(1, 1)",
model.model.2.cv1,Other,32,64,"(3, 3)","(2, 2)","(1, 1)",
model.model.2.cv1.conv,Conv2D,64,32,"(1, 1)","(1, 1)","(0, 0)",
model.model.2.cv1.act,Other,64,32,"(1, 1)","(1, 1)","(0, 0)",
model.model.2.cv2,Other,64,32,"(1, 1)","(1, 1)","(0, 0)",
model.model.2.cv2.conv,Conv2D,32,64,"(3, 3)","(1, 1)","(1, 1)",
model.model.2.cv2.act,Other,32,64,"(3, 3)","(1, 1)","(1, 1)",
model.model.3,Other,32,64,"(3, 3)","(1, 1)","(1, 1)",
model.model.3.conv,Conv2D,64,128,"(3, 3)","(2, 2)","(1, 1)",
model.model.3.act,Other,64,128,"(3, 3)","(2, 2)","(1, 1)",
model.model.4,Other,64,128,"(3, 3)","(2, 2)","(1, 1)",
model.model.4.0,Other,64,128,"(3, 3)","(2, 2)","(1, 1)",
model.model.4.0.cv1,Other,64,128,"(3, 3)","(2, 2)","(1, 1)",
model.model.4.0.cv1.conv,Conv2D,128,64,"(1, 1)","(1, 1)","(0, 0)",
model.model.4.0.cv1.act,Other,128,64,"(1, 1)","(1, 1)","(0, 0)",
model.model.4.0.cv2,Other,128,64,"(1, 1)","(1, 1)","(0, 0)",
model.model.4.0.cv2.conv,Conv2D,64,128,"(3, 3)","(1, 1)","(1, 1)",
model.model.4.0.cv2.act,Other,64,128,"(3, 3)","(1, 1)","(1, 1)",
model.model.4.1,Other,64,128,"(3, 3)","(1, 1)","(1, 1)",
model.model.4.1.cv1,Other,64,128,"(3, 3)","(1, 1)","(1, 1)",
model.model.4.1.cv1.conv,Conv2D,128,64,"(1, 1)","(1, 1)","(0, 0)",
model.model.4.1.cv1.act,Other,128,64,"(1, 1)","(1, 1)","(0, 0)",
model.model.4.1.cv2,Other,128,64,"(1, 1)","(1, 1)","(0, 0)",
model.model.4.1.cv2.conv,Conv2D,64,128,"(3, 3)","(1, 1)","(1, 1)",
model.model.4.1.cv2.act,Other,64,128,"(3, 3)","(1, 1)","(1, 1)",
model.model.5,Other,64,128,"(3, 3)","(1, 1)","(1, 1)",
model.model.5.conv,Conv2D,128,256,"(3, 3)","(2, 2)","(1, 1)",
model.model.5.act,Other,128,256,"(3, 3)","(2, 2)","(1, 1)",
model.model.6,Other,128,256,"(3, 3)","(2, 2)","(1, 1)",
model.model.6.0,Other,128,256,"(3, 3)","(2, 2)","(1, 1)",
model.model.6.0.cv1,Other,128,256,"(3, 3)","(2, 2)","(1, 1)",
model.model.6.0.cv1.conv,Conv2D,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.6.0.cv1.act,Other,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.6.0.cv2,Other,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.6.0.cv2.conv,Conv2D,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.0.cv2.act,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.1,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.1.cv1,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.1.cv1.conv,Conv2D,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.6.1.cv1.act,Other,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.6.1.cv2,Other,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.6.1.cv2.conv,Conv2D,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.1.cv2.act,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.2,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.2.cv1,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.2.cv1.conv,Conv2D,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.6.2.cv1.act,Other,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.6.2.cv2,Other,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.6.2.cv2.conv,Conv2D,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.2.cv2.act,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.3,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.3.cv1,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.3.cv1.conv,Conv2D,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.6.3.cv1.act,Other,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.6.3.cv2,Other,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.6.3.cv2.conv,Conv2D,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.3.cv2.act,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.4,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.4.cv1,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.4.cv1.conv,Conv2D,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.6.4.cv1.act,Other,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.6.4.cv2,Other,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.6.4.cv2.conv,Conv2D,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.4.cv2.act,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.5,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.5.cv1,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.5.cv1.conv,Conv2D,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.6.5.cv1.act,Other,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.6.5.cv2,Other,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.6.5.cv2.conv,Conv2D,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.5.cv2.act,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.6,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.6.cv1,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.6.cv1.conv,Conv2D,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.6.6.cv1.act,Other,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.6.6.cv2,Other,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.6.6.cv2.conv,Conv2D,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.6.cv2.act,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.7,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.7.cv1,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.7.cv1.conv,Conv2D,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.6.7.cv1.act,Other,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.6.7.cv2,Other,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.6.7.cv2.conv,Conv2D,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.6.7.cv2.act,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.7,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.7.conv,Conv2D,256,512,"(3, 3)","(2, 2)","(1, 1)",
model.model.7.act,Other,256,512,"(3, 3)","(2, 2)","(1, 1)",
model.model.8,Other,256,512,"(3, 3)","(2, 2)","(1, 1)",
model.model.8.0,Other,256,512,"(3, 3)","(2, 2)","(1, 1)",
model.model.8.0.cv1,Other,256,512,"(3, 3)","(2, 2)","(1, 1)",
model.model.8.0.cv1.conv,Conv2D,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.8.0.cv1.act,Other,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.8.0.cv2,Other,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.8.0.cv2.conv,Conv2D,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.0.cv2.act,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.1,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.1.cv1,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.1.cv1.conv,Conv2D,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.8.1.cv1.act,Other,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.8.1.cv2,Other,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.8.1.cv2.conv,Conv2D,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.1.cv2.act,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.2,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.2.cv1,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.2.cv1.conv,Conv2D,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.8.2.cv1.act,Other,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.8.2.cv2,Other,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.8.2.cv2.conv,Conv2D,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.2.cv2.act,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.3,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.3.cv1,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.3.cv1.conv,Conv2D,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.8.3.cv1.act,Other,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.8.3.cv2,Other,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.8.3.cv2.conv,Conv2D,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.3.cv2.act,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.4,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.4.cv1,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.4.cv1.conv,Conv2D,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.8.4.cv1.act,Other,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.8.4.cv2,Other,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.8.4.cv2.conv,Conv2D,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.4.cv2.act,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.5,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.5.cv1,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.5.cv1.conv,Conv2D,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.8.5.cv1.act,Other,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.8.5.cv2,Other,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.8.5.cv2.conv,Conv2D,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.5.cv2.act,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.6,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.6.cv1,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.6.cv1.conv,Conv2D,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.8.6.cv1.act,Other,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.8.6.cv2,Other,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.8.6.cv2.conv,Conv2D,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.6.cv2.act,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.7,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.7.cv1,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.7.cv1.conv,Conv2D,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.8.7.cv1.act,Other,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.8.7.cv2,Other,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.8.7.cv2.conv,Conv2D,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.8.7.cv2.act,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.9,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.9.conv,Conv2D,512,1024,"(3, 3)","(2, 2)","(1, 1)",
model.model.9.act,Other,512,1024,"(3, 3)","(2, 2)","(1, 1)",
model.model.10,Other,512,1024,"(3, 3)","(2, 2)","(1, 1)",
model.model.10.0,Other,512,1024,"(3, 3)","(2, 2)","(1, 1)",
model.model.10.0.cv1,Other,512,1024,"(3, 3)","(2, 2)","(1, 1)",
model.model.10.0.cv1.conv,Conv2D,1024,512,"(1, 1)","(1, 1)","(0, 0)",
model.model.10.0.cv1.act,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)",
model.model.10.0.cv2,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)",
model.model.10.0.cv2.conv,Conv2D,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.10.0.cv2.act,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.10.1,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.10.1.cv1,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.10.1.cv1.conv,Conv2D,1024,512,"(1, 1)","(1, 1)","(0, 0)",
model.model.10.1.cv1.act,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)",
model.model.10.1.cv2,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)",
model.model.10.1.cv2.conv,Conv2D,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.10.1.cv2.act,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.10.2,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.10.2.cv1,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.10.2.cv1.conv,Conv2D,1024,512,"(1, 1)","(1, 1)","(0, 0)",
model.model.10.2.cv1.act,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)",
model.model.10.2.cv2,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)",
model.model.10.2.cv2.conv,Conv2D,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.10.2.cv2.act,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.10.3,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.10.3.cv1,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.10.3.cv1.conv,Conv2D,1024,512,"(1, 1)","(1, 1)","(0, 0)",
model.model.10.3.cv1.act,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)",
model.model.10.3.cv2,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)",
model.model.10.3.cv2.conv,Conv2D,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.10.3.cv2.act,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.11,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.11.cv1,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.11.cv1.conv,Conv2D,1024,512,"(1, 1)","(1, 1)","(0, 0)",
model.model.11.cv1.act,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)",
model.model.11.cv2,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)",
model.model.11.cv2.conv,Conv2D,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.11.cv2.act,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.12,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.12.conv,Conv2D,1024,512,"(1, 1)","(1, 1)","(0, 0)",
model.model.12.act,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)",
model.model.13,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)",
model.model.13.conv,Conv2D,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.13.act,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.14,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.14.conv,Conv2D,1024,512,"(1, 1)","(1, 1)","(0, 0)",
model.model.14.act,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)",
model.model.15,Other,1024,512,"(1, 1)","(1, 1)","(0, 0)",
model.model.15.conv,Conv2D,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.15.act,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.16,Other,512,1024,"(3, 3)","(1, 1)","(1, 1)",
model.model.16.conv,Conv2D,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.16.act,Other,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.17,Upsample,2.0,,,,,
model.model.18,Other,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.19,Other,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.19.cv1,Other,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.19.cv1.conv,Conv2D,768,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.19.cv1.act,Other,768,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.19.cv2,Other,768,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.19.cv2.conv,Conv2D,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.19.cv2.act,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.20,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.20.cv1,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.20.cv1.conv,Conv2D,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.20.cv1.act,Other,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.20.cv2,Other,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.20.cv2.conv,Conv2D,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.20.cv2.act,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.21,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.21.conv,Conv2D,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.21.act,Other,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.22,Other,512,256,"(1, 1)","(1, 1)","(0, 0)",
model.model.22.conv,Conv2D,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.22.act,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.23,Other,256,512,"(3, 3)","(1, 1)","(1, 1)",
model.model.23.conv,Conv2D,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.23.act,Other,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.24,Upsample,2.0,,,,,
model.model.25,Other,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.26,Other,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.26.cv1,Other,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.26.cv1.conv,Conv2D,384,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.26.cv1.act,Other,384,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.26.cv2,Other,384,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.26.cv2.conv,Conv2D,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.26.cv2.act,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.27,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.27.0,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.27.0.cv1,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.27.0.cv1.conv,Conv2D,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.27.0.cv1.act,Other,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.27.0.cv2,Other,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.27.0.cv2.conv,Conv2D,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.27.0.cv2.act,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.27.1,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.27.1.cv1,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.27.1.cv1.conv,Conv2D,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.27.1.cv1.act,Other,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.27.1.cv2,Other,256,128,"(1, 1)","(1, 1)","(0, 0)",
model.model.27.1.cv2.conv,Conv2D,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.27.1.cv2.act,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.28,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.28.m,Other,128,256,"(3, 3)","(1, 1)","(1, 1)",
model.model.28.m.0,Conv2D,256,255,"(1, 1)","(1, 1)","(0, 0)",
model.model.28.m.1,Conv2D,512,255,"(1, 1)","(1, 1)","(0, 0)",
model.model.28.m.2,Conv2D,1024,255,"(1, 1)","(1, 1)","(0, 0)",
